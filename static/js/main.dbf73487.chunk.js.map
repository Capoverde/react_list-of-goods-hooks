{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","ALPHABETICALLY","sort","a","b","localeCompare","LENGTH","length","reverse","App","useState","setIsReversed","NONE","setSortType","className","type","onClick","prevIsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcF,SAASC,EACPC,EADF,GAGa,IADTC,EACQ,EADRA,SAAUC,EACF,EADEA,WAENC,EAAY,YAAOH,GAYzB,OAVIC,IAAaJ,EAASO,eACxBD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACnCN,IAAaJ,EAASY,QAC/BN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAGvCR,GACFC,EAAaQ,UAGRR,EAGF,SAASS,IACd,MAAoCC,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBY,EAAnB,KACA,EAAgCD,mBAAShB,EAASkB,MAAlD,mBAAOd,EAAP,KAAiBe,EAAjB,KAmBA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEhB,IAAaJ,EAASO,eAClB,iBACA,kBAENe,QA3ByB,WAC/BH,EAAYnB,EAASO,iBAmBjB,iCAYA,wBACEc,KAAK,SACLD,UACEhB,IAAaJ,EAASY,OAAS,iBAAmB,kBAEpDU,QAjCmB,WACzBH,EAAYnB,EAASY,SA2BjB,4BAUA,wBACES,KAAK,SACLD,WACiB,IAAff,EACI,oBACA,6BAENiB,QAzCmB,WACzBL,GAAc,SAACM,GAAD,OAAqBA,MAiC/B,sBAWEnB,IAAaJ,EAASkB,OAAuB,IAAfb,IAC9B,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QA7CI,WACZH,EAAYnB,EAASkB,MACrBD,GAAc,IAwCR,sBAUJ,6BACGf,EAAkBD,EAAiB,CAAEG,WAAUC,eAAcmB,KAC5D,SAACC,GAAD,OACE,oBAAe,UAAQ,OAAvB,SACGA,GADMA,Y,SArGhBzB,K,gCAAAA,E,gBAAAA,E,aAAAA,M,KCdL0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dbf73487.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABETICALLY = 'ALPHABETICALLY',\n  LENGTH = 'LENGTH',\n  NONE = 'NONE',\n}\n\ntype GoodsSortOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nfunction getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: GoodsSortOptions,\n): string[] {\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABETICALLY) {\n    visibleGoods.sort((a, b) => a.localeCompare(b));\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport function App(): JSX.Element {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleSortAlphabetically = (): void => {\n    setSortType(SortType.ALPHABETICALLY);\n  };\n\n  const handleSortByLength = (): void => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleGoodsReverse = (): void => {\n    setIsReversed((prevIsReversed) => !prevIsReversed);\n  };\n\n  const reset = (): void => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            sortType === SortType.ALPHABETICALLY\n              ? 'button is-info'\n              : 'button is-light'\n          }\n          onClick={handleSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            sortType === SortType.LENGTH ? 'button is-info' : 'button is-light'\n          }\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            isReversed === true\n              ? 'button is-success'\n              : 'button is-success is-light'\n          }\n          onClick={handleGoodsReverse}\n        >\n          Reverse\n        </button>\n        {(sortType !== SortType.NONE || isReversed === true) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, { sortType, isReversed }).map(\n          (good) => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ),\n        )}\n      </ul>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}